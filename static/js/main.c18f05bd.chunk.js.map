{"version":3,"sources":["components/audio_input.tsx","App.js","reportWebVitals.js","index.js"],"names":["AudioInput","f","setF","useState","color","segments","setSegments","style","setStyle","audioContext","AudioContext","drawAudio","url","fetch","then","response","arrayBuffer","decodeAudioData","audioBuffer","draw","filteredData","multiplier","Math","pow","max","map","n","normalizeData","filterData","rawData","getChannelData","samples","blockSize","floor","length","i","blockStart","sum","j","abs","push","normalizedData","canvas","document","querySelector","dpr","window","devicePixelRatio","width","offsetWidth","height","offsetHeight","padding","ctx","getContext","scale","translate","styleFunc","drawChonk","drawLine","x","isEven","lineWidth","strokeStyle","beginPath","moveTo","lineTo","arc","PI","stroke","lineCap","className","type","accept","onChange","e","files","console","log","URL","createObjectURL","getElementById","load","handleChange","target","id","controls","autoPlay","src","min","value","onMouseUp","defaultChecked","App","class","href","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c18f05bd.chunk.js","sourcesContent":["import React, { ReactNode, useState } from 'react';\n\ninterface IProps {\n    children: ReactNode;\n    f: string;\n    setF: any;\n}\n\nconst AudioInput = ({f, setF}: IProps) =>\n{\n    const [color, setColor] = useState(\"#7c9dd6\");\n    const [segments, setSegments] = useState(100 as any);\n    const [style, setStyle] = useState(true);\n    \n    function handleChange(files: FileList)\n    {\n        console.log(files);\n        var url = URL.createObjectURL(files[0])\n        setF(url);\n        (document.getElementById('audio') as HTMLAudioElement).load();\n        //draw canvas\n        drawAudio(url);\n    }\n\n    //------------Visualizer Functions\n\n    // web audio api\n    const audioContext = new AudioContext();\n\n    function drawAudio(url : string) \n    {\n        return (\n            fetch(url)\n            .then(response => response.arrayBuffer())\n            .then(arrayBuffer => audioContext.decodeAudioData(arrayBuffer))\n            .then(audioBuffer => draw(normalizeData(filterData(audioBuffer))))\n        )\n    }\n\n    function normalizeData(filteredData : any[])\n    {\n        var multiplier = Math.pow(Math.max(...filteredData), -1);\n        return filteredData.map(n => n * multiplier);\n    }\n\n    const filterData = (audioBuffer: AudioBuffer)=> {\n        const rawData = audioBuffer.getChannelData(0); \n        const samples = segments; //edit for more or less chunk visuals\n        const blockSize = Math.floor(rawData.length / samples);\n        const filteredData = [];\n\n        for (let i = 0; i < samples; i++) {\n        let blockStart = blockSize * i; // the location of the first sample in the block\n        let sum = 0;\n        for (let j = 0; j < blockSize; j++) {\n            sum = sum + Math.abs(rawData[blockStart + j]); // find the sum of all the samples in the block\n        }\n        filteredData.push(sum / blockSize); // divide the sum by the block size to get the average\n        }\n        return filteredData;\n    };\n\n    const draw = (normalizedData : any[]) => {\n        // set up the canvas\n        const canvas = document.querySelector(\"canvas\");\n        const dpr = window.devicePixelRatio;\n        const padding = 20;\n        canvas.width = canvas.offsetWidth * dpr;\n        canvas.height = (canvas.offsetHeight + padding * 2) * dpr;\n        const ctx = canvas.getContext(\"2d\");\n        ctx.scale(dpr, dpr);\n        ctx.translate(0, canvas.offsetHeight / 2 + padding); // set Y = 0 to be in the middle of the canvas\n    \n        // draw the line segments\n        var styleFunc = style===true ? drawChonk : drawLine;\n        const width = canvas.offsetWidth / normalizedData.length;\n        for (let i = 0; i < normalizedData.length; i++) {\n            const x = width * i;\n            let height = normalizedData[i] * canvas.offsetHeight - padding;\n            if (height < 0) {\n                height = 0;\n            } else if (height > canvas.offsetHeight / 2) {\n                height = (height > canvas.offsetHeight / 2) as any;\n            }\n            styleFunc(ctx, x, height, width, (i + 1) % 2);\n            // if(style===\"chonk\") drawChonk(ctx, x, height, width);\n            // else drawLine(ctx, x, height, width, (i + 1) % 2);\n        }\n    };\n\n    const drawLine = (ctx: CanvasRenderingContext2D,\n                                x:number,\n                                height:any, width:number, isEven:number) => {\n        ctx.lineWidth = 900/segments; \n        ctx.strokeStyle = color;\n        ctx.beginPath();\n        height = isEven ? height : -height;\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n        //ctx.lineTo(x+width, height);\n        ctx.arc(x + width / 2, height, width / 2, Math.PI, 0, isEven as any);\n        ctx.lineTo(x + width, 0);\n        ctx.stroke();\n    };\n\n    const drawChonk = (ctx: CanvasRenderingContext2D,\n                        x:number,\n                        height:any, width:number) => \n    {\n        ctx.lineWidth = 900/segments; \n        ctx.strokeStyle = color;\n        ctx.lineCap = 'round';\n        ctx.beginPath();\n        ctx.moveTo(x+width/2, -height);\n        ctx.lineTo(x+width/2, height);\n        ctx.stroke();\n    }\n\n    return (\n        <div className=\"Input\">\n            Let's choose a file! <br/>\n            <input type=\"file\" accept=\"audio/*\" onChange={ e => handleChange(e.target.files) } />\n            <br/>\n            <audio id=\"audio\" controls autoPlay>\n                <source src={f}/>\n                Oops, your browser doesn't support audio?\n            </audio>\n            \n            <div className=\"parameters\">\n                <input type=\"range\" min=\"50\" max=\"300\" className=\"slider\" onChange={ e => setSegments((e.target as HTMLInputElement).value)} onMouseUp={ e => drawAudio(f) }/>\n                <input type=\"checkbox\" defaultChecked onChange={e => setStyle(style ? false : true)} onMouseUp={ e => drawAudio(f) }/>\n                    \n                <body>{style}</body>\n            </div>\n        </div>\n    )\n\n    \n}\n\nexport default AudioInput;\n\n\n\n","import './App.css';\nimport React, { useState } from 'react';\nimport AudioInput from './components/audio_input.tsx';\nfunction App() {\n  const [f, setF] = useState(\"\");\n\n  return (\n    <div className=\"App\">\n      <h1>ðŸŒŠWaveform VisualizerðŸŒŠ</h1><br/>\n      <code><AudioInput f={f} setF={setF}/></code>\n      <canvas/>\n      <code class=\"bottom\">written by Max Zhang, <a href=\"https://github.com/chetbae\" rel=\"noreferrer\" target=\"_blank\">GitHub</a></code>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}